#!/usr/bin/env python3
import os.path
import sys

import six


def main():   # type: () -> int
    assert not six.PY2, 'This must be run in at least python 3'

    # some special ones
    removes = ['from six import callable', 'from six import next']
    renames = []
    for move in six._moved_attributes:  # type: ignore
        if isinstance(move, six.MovedAttribute):  # type: ignore
            if move.name != move.attr:
                continue

            if move.mod == 'builtins':
                removes.append('from six.moves import {}'.format(move.name))
            else:
                renames.append('six.moves={}:{}'.format(move.mod, move.name))
        elif isinstance(move, six.MovedModule):  # type: ignore
            if 'six.moves.{}'.format(move.name) == move.mod:
                renames.append('six.moves.{}={}'.format(move.name, move.name))
            else:
                renames.append('six.moves.{}={}'.format(move.name, move.mod))
        else:
            raise NotImplementedError(type(move))

    # six.moves.urllib imports urllb.* which doesn't happen with
    # `import urllib`
    urllib_index = renames.index('six.moves.urllib=urllib')
    renames[urllib_index:urllib_index + 1] = [
        # but imports from submodules are fine
        'six.moves.urllib.{0}=urllib.{0}'.format(submod)
        for submod in ('error', 'parse', 'request', 'response', 'robotparser')
    ]

    # not in six.moves for some reason
    renames.extend((
        'six=functools:wraps',
        'six=io:StringIO',
        'six=io:BytesIO',
    ))

    print(
        '# GENERATED VIA {}\n'
        '# Using six=={}\n'
        'SIX_REMOVALS = [\n{}]\n'
        'SIX_RENAMES = [\n{}]\n'
        '# END GENERATED\n'.format(
            os.path.basename(sys.argv[0]),
            six.__version__,  # type: ignore
            ''.join('    {!r},\n'.format(r) for r in sorted(removes)),
            ''.join('    {!r},\n'.format(r) for r in sorted(renames)),
        ),
    )

    return 0


if __name__ == '__main__':
    exit(main())
